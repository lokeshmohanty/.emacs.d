#+TITLE: My Emacs Config
#+AUTHOR: Lokesh Mohanty
#+PROPERTY: header-args:emacs-lisp :tangle init.el

CHEATSHEET: [[file:cheatsheet.pdf][./cheatsheet.pdf]]

* Straight (package manager)
References: [[https://github.com/radian-software/straight.el][straight]], [[https://github.com/jwiegley/use-package][use-package]]

#+begin_src emacs-lisp
  ;; get latest version
  (setq straight-repository-branch "develop")

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; install package using straight if not installled
  (setq straight-use-package-by-default 't)
  ;; integrate with use-package
  (straight-use-package 'use-package)
  ;; to change git protocol
  ;; (straight-vc-git-default-protocol 'ssh)
#+end_src

* Settings

#+begin_src emacs-lisp
  ;; display position on modeline
  (column-number-mode)
  ;; wrap lines
  (global-visual-line-mode t)
  ;; update buffers on file change
  (global-auto-revert-mode)
  ;; enable relative line numbering
  (setq display-line-numbers-type 'relative)
  ;; enable line numbers globally
  (global-display-line-numbers-mode 1)
  ;; persist history over emacs restarts
  (savehist-mode)
#+end_src

* Graphics
** Theme
References: [[https://github.com/doomemacs/themes][doom-themes]]

#+begin_src emacs-lisp
  (use-package doom-themes
    :config 
    (load-theme 'doom-gruvbox-light t)
    (doom-themes-org-config))
#+end_src

** Icons
References: [[https://github.com/domtronn/all-the-icons.el][all-the-icons]], [[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]]

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-completion
    :after all-the-icons
    :config (all-the-icons-completion-mode))

  ;; run the below command to install fonts
  ;; (all-the-icons-install-fonts)
#+end_src

** Font

#+begin_src emacs-lisp
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)
#+end_src

* Text Edit/Jump
** Evil (edit text like in vim)
References: [[https://evil.readthedocs.io/en/latest/overview.html][evil]], [[https://github.com/emacs-evil/evil-collection][evil-collection]], [[https://github.com/emacs-evil/evil/blob/master/evil-maps.el][evil maps]]
| =C-z= | toggle Emacs state | evil-toggle-key |

  #+begin_src emacs-lisp
    (use-package evil
      :init
      (setq evil-want-keybinding nil) ;; required by evil-collection
      :custom
      (evil-shift-width 2)
      (evil-want-find-undo t) ;; insert mode undo steps as per emacs
      (evil-undo-system 'undo-redo) ;; use native commands in emacs 28
      :config
      (evil-mode 1))

    (use-package evil-collection
      :after evil
      :custom (evil-collection-setup-minibuffer t)
      :init (evil-collection-init))
  #+end_src

** Evil Multiple Cursors
References: [[https://github.com/gabesoft/evil-mc][evil-mc]]
Commands Prefix: g.

  #+begin_src emacs-lisp
  (use-package evil-mc
    :config (global-evil-mc-mode 1))
  #+end_src

** Evil Owl (view registers and marks on the fly)
References: [[https://github.com/mamapanda/evil-owl][evil-owl]]

#+begin_src emacs-lisp
  (use-package evil-owl
    :config
    (setq evil-owl-max-string-length 500)
    (add-to-list 'display-buffer-alist
                 '("*evil-owl*"
                   (display-buffer-in-side-window)
                   (side . bottom)
                   (window-height . 0.3)))
    (evil-owl-mode))
  ;; (use-package evil-owl
  ;;   :config
  ;;   (setq evil-owl-display-method 'posframe
  ;;         evil-owl-extra-posframe-args '(:width 50 :height 20)
  ;;         evil-owl-max-string-length 50)
  ;;   (evil-owl-mode))
#+end_src

** Evil Lion (aligning text)
References: [[https://github.com/edkolev/evil-lion][evil-lion]]
Commands: gl (left align), gL (right align)

#+begin_src emacs-lisp
  (use-package evil-lion
    :config (evil-lion-mode))
#+end_src

** Expand Region (increase selected region by semantics)
References: [[https://github.com/magnars/expand-region.el][expand-region]]

#+begin_src emacs-lisp
  (use-package expand-region)
#+end_src

** Embrace (add surroundings in pairs)
References: [[https://github.com/cute-jumper/embrace.el][embrace]]

#+begin_src emacs-lisp
  (use-package embrace
    :commands embrace-commander)
#+end_src

* Helpful (more information in help)
References: [[https://github.com/Wilfred/helpful][helpful]]
Replace default help functions with this package as it provides far more information with syntax highlighting

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable	; for functions and macros
              helpful-function	; for functions only
              helpful-macro
              helpful-command		; for interactive functions
              helpful-key
              helpful-variable
              helpful-at-point)
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap Info-goto-emacs-command-node] . helpful-function)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key)
    ([remap describe-variable] . helpful-variable)
    ([remap display-local-help] . helpful-at-point))

#+end_src

* Which Key (display options for an incomplete key-binding)
References: [[https://github.com/justbur/emacs-which-key][which-key]]

#+begin_src emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+end_src

* Org mode (one of the best features of emacs)
** Settings
References: [[https://orgmode.org/worg/org-tutorials/index.html][tutorials]]

#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-startup-folded t)
    (org-startup-indented t)
    (org-confim-babel-evaluate nil)
    (org-pretty-entities t))		; "C-c C-x \" to toggle
#+end_src

** Visual
References: [[https://github.com/sabof/org-bullets][org-bullets]], [[github:io12/org-fragtog][org-fragtog]], [[https://github.com/awth13/org-appear][org-appear]]

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))

  ;; latex fragments preview, toggle with "C-c C-x C-l"
  (use-package org-fragtog
    :after org
    :hook (org-mode . org-fragtog-mode))

  (use-package org-appear
    :hook (org-mode . org-appear-mode)
    :custom
    (org-appear-autolinks t)
    (org-appear-autoentities t)
    (org-appear-autosubmarkers t)	; sub/super scripts
    (org-appear-autokeywords t)	; keywords in org-hidden-keywords
    ;; (org-appear-delay t)
  )
#+end_src

** Source blocks
References: [[https://orgmode.org/worg/org-contrib/babel/languages.html][org-babel]]

#+begin_src emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
        '((C          . t)
          (python     . t)
          (shell      . t)
          (latex      . t)
          (js         . t)
          (sql        . t)
          (haskell    . t)))
#+end_src

** Evil Org (evil kebindings for org)
References: [[https://github.com/Somelauw/evil-org-mode][evil-org]]

#+begin_src emacs-lisp
  (use-package evil-org
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

* Languages
** Latex
References: [[https://www.gnu.org/software/auctex/manual/auctex.html][auctex]], [[https://github.com/cdominik/cdlatex][cdlatex]](abbreviations), [[https://www.gnu.org/software/auctex/manual/reftex.html][reftex]](references, labels, ...)

#+begin_src emacs-lisp
  (use-package tex
    :straight auctex
    :bind (:map TeX-mode-map ("<f2>" . preview-document))
    :custom
    (TeX-auto-save t)
    (TeX-parse-self t)
    (TeX-PDF-mode t)
    (TeX-view-program-selection '((output-pdf "xdg-open")))
    :config
    (setq-default TeX-master nil))

  (use-package cdlatex
    :hook
    (LaTeX-mode . cdlatex-mode)
    (org-mode . org-cdlatex-mode))
#+end_src

** Markdown
References: [[https://jblevins.org/projects/markdown-mode/][markdown-mode]], [[https://github.com/Somelauw/evil-markdown][evil-markdown]], [[https://github.com/markedjs/marked][marked]](for preview)[not implemented yet]

#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))

  (use-package evil-markdown
    :straight '(evil-markdown
                 :host github
                 :repo "Somelauw/evil-markdown")
    :after markdown-mode
    :hook (markdown-mode . evil-markdown-mode))
#+end_src

** C/C++
References: [[https://emacs-lsp.github.io/lsp-mode/page/lsp-cmake/][cmake]]

#+begin_src shell
  pip install cmake-language-server
#+end_src

#+begin_src emacs-lisp
  (use-package cmake-mode)
#+end_src

** Python
References: [[https://emacs-lsp.github.io/lsp-pyright/][lsp-pyright]], [[https://github.com/pythonic-emacs/anaconda-mode][anaconda-mode]], [[https://github.com/jorgenschaefer/pyvenv][pyvenv]]

#+begin_src shell
  pip install "ptvsd>=4.2"
#+end_src

#+begin_src emacs-lisp
  (use-package lsp-pyright
    :after lsp-mode
    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp-deferred)))
    :config
    (require 'dap-python))

  (use-package pyvenv)
#+end_src

** Others

#+begin_src emacs-lisp
  (use-package haskell-mode)
  (use-package markdown-mode)
#+end_src

** Smart Parenthesis
References: [[https://github.com/Fuco1/smartparens][smartparens]], [[https://github.com/Fuco1/smartparens/wiki/Installation][wiki]]

#+begin_src emacs-lisp
  ;; (use-package smartparens
  ;;   :config
  ;;   (smartparens-global-mode 1))
#+end_src

** Language Server Protocol (LSP)
References: [[https://emacs-lsp.github.io/lsp-mode/][lsp]]

#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init (setq lsp-keymap-prefix "C-l")
    :config (define-key lsp-mode-map (kbd "C-l") lsp-command-map)
    :hook
    (c-mode . lsp-deferred)
    (c++-mode . lsp-deferred)
    (cmake-mode . lsp-deferred)
    (lsp-mode . lsp-enable-which-key-integration))
#+end_src

** Debug Adapter Protocol (DAP)
References: [[https://emacs-lsp.github.io/dap-mode/page/configuration/][dap]]

#+begin_src emacs-lisp
  (use-package dap-mode)
#+end_src

* Completion
** Company (text completion framework)
References: [[http://company-mode.github.io/][company]]

#+begin_src emacs-lisp
  (use-package company
    :custom (company-minimum-prefix-length 1)
    :config (global-company-mode))
#+end_src

** Vertico (vertical interactive completion ui)
References: [[https://github.com/minad/vertico][vertico]]

#+begin_src emacs-lisp
  (use-package vertico
    :init (vertico-mode)
    :custom (vertico-cycle t))
#+end_src

** Orderless (completion style)
References: [[https://github.com/oantolin/orderless][orderless]]

Allows fuzzy search completion

#+begin_src emacs-lisp
  (use-package orderless
    :config (setq orderless-component-separator "[ &]") ; to search with multiple components in company
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides
     '((file (styles basic partial-completion)))))
#+end_src

** Marginalia (enable rich annotations for completions)
References: [[https://github.com/minad/marginalia][marginalia]]

#+begin_src emacs-lisp
  (use-package marginalia
    :init (marginalia-mode)
    ;; :config (add-hook 'marginalia-mode-hook
    ;;                   #'all-the-icons-completion-marginalia-setup)
    )
#+end_src

** Embark (run commands on target)
References: [[https://github.com/oantolin/embark][embark]]

#+begin_src emacs-lisp
  (use-package embark
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
#+end_src

* Version control

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

* Vterm (terminal within emacs)

#+begin_src emacs-lisp
  (use-package vterm
    :custom (vterm-shell "fish"))
#+end_src

* PDF
References: [[https://pdftools.wiki/][pdf-tools]]
Troubleshooting:
- ~cairo-devel~, ~poppler-devel~, ~poppler-glib-devel~ packages might be required

#+begin_src emacs-lisp
  (use-package pdf-tools)
#+end_src

* Custom Key-bindings
References: [[https://evil.readthedocs.io/en/latest/keymaps.html#leader-keys][evil keymaps]]

Other bindings set in marginalia

#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'er/expand-region)
  (global-set-key (kbd "C--") 'er/contract-region)

  (evil-set-leader 'normal (kbd "SPC"))
  (evil-set-leader 'visual (kbd "SPC"))

  (evil-define-key 'normal 'global
    (kbd "<leader>e") 'embrace-commander)
  (evil-define-key 'visual 'global
    (kbd "<leader>e") 'embrace-commander)

  (evil-define-key 'normal 'global
    (kbd "C-.") 'embark-act)
  (evil-define-key 'visual 'global
    (kbd "C-.") 'embark-act)
  (evil-define-key 'insert 'global
    (kbd "C-.") 'embark-act)
  (evil-define-key 'normal 'global
    (kbd "C-;") 'embark-dwim)
  (evil-define-key 'visual 'global
    (kbd "C-;") 'embark-dwim)
  (evil-define-key 'insert 'global
    (kbd "C-;") 'embark-dwim)

  (evil-define-key 'normal 'minibuffer-local-map
    (kbd "M-A") 'marginalia-cycle)
  (evil-define-key 'insert 'minibuffer-local-map
    (kbd "M-A") 'marginalia-cycle)

  (evil-define-key 'insert 'vertico-map
    (kbd "C-k") 'vertico-previous)
  (evil-define-key 'insert 'vertico-map
    (kbd "C-j") 'vertico-next)
#+end_src

* Notes
- Run ~(all-the-icons-install-fonts)~ on new emacs config setup
- Good packages to try:
  - [[https://github.com/Dewdrops/evil-exchange][evil-exchange]]: swapping text
  - [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]]: enhanced features for commenting
  - [[https://github.com/tecosaur/emacs-everywhere][emacs-everywhere]]: edit text anywhere from within emacs
  - [[https://github.com/abo-abo/hydra][hydra]]: create commands menu
  - [[https://github.com/skeeto/impatient-mode][impatient-mode]]: live previews in browser
  - [[https://github.com/minad/consult][consult]]: practical commands based on completing-read
- Known bugs:
  - ~evil-insert-digraph~ keybinding is shadowed by vertico custom map
